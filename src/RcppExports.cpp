// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_basis2
Rcpp::List c_basis2(Eigen::MappedSparseMatrix<double> A, double eps_limit);
RcppExport SEXP _MetricGraph_c_basis2(SEXP ASEXP, SEXP eps_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type eps_limit(eps_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(c_basis2(A, eps_limit));
    return rcpp_result_gen;
END_RCPP
}
// construct_constraint_matrix
Eigen::SparseMatrix<double> construct_constraint_matrix(const Eigen::MatrixXi& E, int nV, int edge_constraint);
RcppExport SEXP _MetricGraph_construct_constraint_matrix(SEXP ESEXP, SEXP nVSEXP, SEXP edge_constraintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type nV(nVSEXP);
    Rcpp::traits::input_parameter< int >::type edge_constraint(edge_constraintSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_constraint_matrix(E, nV, edge_constraint));
    return rcpp_result_gen;
END_RCPP
}
// construct_directional_constraint_matrix
Eigen::SparseMatrix<double> construct_directional_constraint_matrix(const Eigen::MatrixXi& E, int nV, int nE, int alpha, const std::vector<int>& V_indegree, const std::vector<int>& V_outdegree);
RcppExport SEXP _MetricGraph_construct_directional_constraint_matrix(SEXP ESEXP, SEXP nVSEXP, SEXP nESEXP, SEXP alphaSEXP, SEXP V_indegreeSEXP, SEXP V_outdegreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type nV(nVSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type V_indegree(V_indegreeSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type V_outdegree(V_outdegreeSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_directional_constraint_matrix(E, nV, nE, alpha, V_indegree, V_outdegree));
    return rcpp_result_gen;
END_RCPP
}
// assemble_fem
Rcpp::List assemble_fem(Eigen::MatrixXd E, Eigen::VectorXd h_e, int nV, bool petrov);
RcppExport SEXP _MetricGraph_assemble_fem(SEXP ESEXP, SEXP h_eSEXP, SEXP nVSEXP, SEXP petrovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type E(ESEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type h_e(h_eSEXP);
    Rcpp::traits::input_parameter< int >::type nV(nVSEXP);
    Rcpp::traits::input_parameter< bool >::type petrov(petrovSEXP);
    rcpp_result_gen = Rcpp::wrap(assemble_fem(E, h_e, nV, petrov));
    return rcpp_result_gen;
END_RCPP
}
// projectVecLine
Eigen::VectorXd projectVecLine(Eigen::MatrixXd lines, Eigen::MatrixXd points, int normalized);
RcppExport SEXP _MetricGraph_projectVecLine(SEXP linesSEXP, SEXP pointsSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< int >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(projectVecLine(lines, points, normalized));
    return rcpp_result_gen;
END_RCPP
}
// interpolate2_aux
Rcpp::List interpolate2_aux(Eigen::MatrixXd lines, Eigen::VectorXd pos, int normalized);
RcppExport SEXP _MetricGraph_interpolate2_aux(SEXP linesSEXP, SEXP posSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolate2_aux(lines, pos, normalized));
    return rcpp_result_gen;
END_RCPP
}
// compute_length
double compute_length(Eigen::MatrixXd coords);
RcppExport SEXP _MetricGraph_compute_length(SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_length(coords));
    return rcpp_result_gen;
END_RCPP
}
// generate_mesh
List generate_mesh(int n_edges, NumericVector edge_lengths, IntegerVector n_e, IntegerMatrix E, IntegerVector ind, bool continuous);
RcppExport SEXP _MetricGraph_generate_mesh(SEXP n_edgesSEXP, SEXP edge_lengthsSEXP, SEXP n_eSEXP, SEXP ESEXP, SEXP indSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_edges(n_edgesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edge_lengths(edge_lengthsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n_e(n_eSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type E(ESEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_mesh(n_edges, edge_lengths, n_e, E, ind, continuous));
    return rcpp_result_gen;
END_RCPP
}
// selected_inv_cpp
Eigen::SparseMatrix<double> selected_inv_cpp(const Eigen::SparseMatrix<double>& Q);
RcppExport SEXP _MetricGraph_selected_inv_cpp(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(selected_inv_cpp(Q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MetricGraph_c_basis2", (DL_FUNC) &_MetricGraph_c_basis2, 2},
    {"_MetricGraph_construct_constraint_matrix", (DL_FUNC) &_MetricGraph_construct_constraint_matrix, 3},
    {"_MetricGraph_construct_directional_constraint_matrix", (DL_FUNC) &_MetricGraph_construct_directional_constraint_matrix, 6},
    {"_MetricGraph_assemble_fem", (DL_FUNC) &_MetricGraph_assemble_fem, 4},
    {"_MetricGraph_projectVecLine", (DL_FUNC) &_MetricGraph_projectVecLine, 3},
    {"_MetricGraph_interpolate2_aux", (DL_FUNC) &_MetricGraph_interpolate2_aux, 3},
    {"_MetricGraph_compute_length", (DL_FUNC) &_MetricGraph_compute_length, 1},
    {"_MetricGraph_generate_mesh", (DL_FUNC) &_MetricGraph_generate_mesh, 6},
    {"_MetricGraph_selected_inv_cpp", (DL_FUNC) &_MetricGraph_selected_inv_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MetricGraph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
